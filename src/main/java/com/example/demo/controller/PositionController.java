package com.example.demo.controller;import com.example.demo.entity.TodPosition;import com.example.demo.entity.TomPosition;import com.example.demo.repository.TodPositionRepository;import com.example.demo.repository.TomPositionRepository;import com.example.demo.util.RandomGenerator;import com.example.demo.util.VerificationCode;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.data.redis.core.RedisTemplate;import org.springframework.stereotype.Controller;import org.springframework.web.bind.annotation.PostMapping;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RequestParam;import org.springframework.web.bind.annotation.RestController;import java.util.concurrent.TimeUnit;@RestController@RequestMapping("/position")public class PositionController {    @Autowired    VerificationCode verificationCode;    @Autowired    RedisTemplate redisTemplate;    @Autowired    TomPositionRepository tomPositionRepository;    @Autowired    TodPositionRepository todPositionRepository;    @PostMapping("/reservation")    public Object reservation(@RequestParam("id")Long id,                              @RequestParam("time")String time,                              @RequestParam("phone")String phone,                              @RequestParam("name")String name,                              @RequestParam("code")String code){       if(!redisTemplate.opsForValue().get(phone+'v').equals(code))return "验证码错误";       if(tomPositionRepository.findByUserPhone(phone)!=null)return "您已经预约座位";       TomPosition tomPosition = tomPositionRepository.getOne(id);       for(int i = 0;i<time.length();i++){           switch (time.charAt(i)){               case '0':                   if(tomPosition.isMorning())return "该位置已被预约";                   tomPosition.setMorning(true);                   break;               case '1':                   if(tomPosition.isAfternoon())return "该位置已被预约";                   tomPosition.setAfternoon(true);                   break;               case '2':                   if(tomPosition.isNight())return "该位置已被预约";                   tomPosition.setNight(true);                   break;           }       }       tomPosition.setUserName(name);       tomPosition.setUserPhone(phone);       tomPositionRepository.save(tomPosition);       return "预约成功";    }    @PostMapping("/getcode")    public Object getCode(@RequestParam("phone")String phone){        String code = RandomGenerator.generateCode();        verificationCode.getCode(phone,code);        redisTemplate.opsForValue().set(phone+"v",code,604800, TimeUnit.SECONDS);        return "发送验证码成功";    }    @PostMapping("/getallre")    public Object getallre(){        return tomPositionRepository.findAll();    }    @PostMapping("/getall")    public Object getall(){        return todPositionRepository.findAll();    }    @PostMapping("/getreuserinfo")//获得用户预约的座位信息    public Object getReUserInfo(@RequestParam("phone")String phone){        return tomPositionRepository.findByUserPhone(phone);    }    @PostMapping("/getuserinfo")//获得用户当天的座位信息    public Object getuserinfo(@RequestParam("phone")String phone){        return todPositionRepository.findByUserPhone(phone);    }    @PostMapping("/deletere")    public Object deletere(@RequestParam("phone")String phone,                           @RequestParam("code")String code){        if(!redisTemplate.opsForValue().get(phone+"v").equals(code))return "验证码错误";        tomPositionRepository.deletereservation(phone);        return "删除预约成功";    }}